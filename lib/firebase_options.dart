// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

import 'package:flutter_dotenv/flutter_dotenv.dart';

void main() async {
  await dotenv.load(); // load environment variables
  runApp(MyApp());
}


/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

import 'package:flutter/foundation.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

FirebaseOptions get firebaseOptions {
  if (kIsWeb) {
    return FirebaseOptions(
      apiKey: dotenv.env['API_KEY_WEB']!,
      appId: dotenv.env['APP_ID_WEB']!,
      messagingSenderId: dotenv.env['MESSAGING_SENDER_ID_WEB']!,
      projectId: dotenv.env['PROJECT_ID_WEB']!,
      authDomain: dotenv.env['AUTH_DOMAIN_WEB'],
      storageBucket: dotenv.env['STORAGE_BUCKET_WEB'],
      measurementId: dotenv.env['MEASUREMENT_ID_WEB'],
    );
  }

  switch (defaultTargetPlatform) {
    case TargetPlatform.android:
      return FirebaseOptions(
        apiKey: dotenv.env['API_KEY_ANDROID']!,
        appId: dotenv.env['APP_ID_ANDROID']!,
        messagingSenderId: dotenv.env['MESSAGING_SENDER_ID_ANDROID']!,
        projectId: dotenv.env['PROJECT_ID_ANDROID']!,
      );
    case TargetPlatform.iOS:
      return FirebaseOptions(
        apiKey: dotenv.env['API_KEY_IOS']!,
        appId: dotenv.env['APP_ID_IOS']!,
        messagingSenderId: dotenv.env['MESSAGING_SENDER_ID_IOS']!,
        projectId: dotenv.env['PROJECT_ID_IOS']!,
        storageBucket: dotenv.env['STORAGE_BUCKET_IOS'],
        iosBundleId: dotenv.env['IOS_BUNDLE_ID'],
      );
    default:
      throw UnsupportedError('This platform is not supported');
  }
}


  
}
